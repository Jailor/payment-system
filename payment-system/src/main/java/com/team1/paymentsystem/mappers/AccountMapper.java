package com.team1.paymentsystem.mappers;

import com.team1.paymentsystem.dto.account.AccountDTO;
import com.team1.paymentsystem.entities.Account;
import com.team1.paymentsystem.entities.Customer;
import com.team1.paymentsystem.repositories.AccountRepository;
import com.team1.paymentsystem.repositories.CustomerRepository;
import com.team1.paymentsystem.states.Currency;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;

@Service
public class AccountMapper implements Mapper<AccountDTO, Account> {
    @Autowired
    CustomerRepository customerRepository;
    @Autowired
    AccountRepository accountRepository;
    @Override
    public AccountDTO toDTO(Account entity) {
        AccountDTO accountDTO = new AccountDTO();
        BeanUtils.copyProperties(entity,accountDTO);
        accountDTO.setOwnerEmail(entity.getOwner().getEmail());
        accountDTO.setNeedsApproval(entity.getNextStateId()!=null);
        return accountDTO;
    }

    @Override
    public Account toEntity(AccountDTO dto) {
        Account account = new Account();
        BeanUtils.copyProperties(dto,account);
        Customer owner = customerRepository.findByEmail(dto.getOwnerEmail()).orElse(null);
        if(owner==null){
            Account db = accountRepository.findByAccountNumber(dto.getAccountNumber()).orElse(null);
            if(db == null) return null;
            account.setId(db.getId());
            account.setOwner(db.getOwner());
            if(account.getCurrency() == null) account.setCurrency(db.getCurrency());
            if(account.getAccountStatus() == null) account.setAccountStatus(db.getAccountStatus());
            if(account.getNextStatus() == null) account.setNextStatus(db.getNextStatus());
            if(account.getStatus() == null) account.setStatus(db.getStatus());
            if(account.getNextStateId() == null) account.setNextStateId(db.getNextStateId());
        }else{
            account.setOwner(owner);
            account.setCurrency(Currency.getCurrency(dto.getCurrency().getName()));
        }
        if(account.getAccountNumber().equals("<auto-generated>")){
           boolean done = false;
           while (!done){
               // generate a new account number: ACC + 10 random digits + 1 digit checksum
               String accountNumber = "ACC";
               for(int i=0;i<10;i++){
                   SecureRandom secureRandom = new SecureRandom();
                   int rand = secureRandom.nextInt(10);
                   accountNumber += rand;
               }
               int checksum = 0;
               for(int i=3; i<accountNumber.length();i++){
                   checksum += Character.getNumericValue(accountNumber.charAt(i));
               }
               accountNumber += checksum%10;
               account.setAccountNumber(accountNumber);
               if(accountRepository.findByAccountNumber(accountNumber).orElse(null)==null){
                  done = true;
               }
           }
        }

        return account;
    }
}
